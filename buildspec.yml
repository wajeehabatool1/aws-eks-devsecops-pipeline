version: 0.2

env:
  variables:
    SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/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"
    SNYK_TOKEN: "fbc76124-10d8-4ef1-9c85-016067774004"
    AWS_ACCOUNT_ID: "339712865909"
    AWS_DEFAULT_REGION: "ap-south-1"
    IMAGE_REPO_NAME: "devsecops"
    IMAGE_TAG: "latest"
    S3_BUCKET_NAME: "image-definition-bucket"

    CUSTOMER_SERVICE_REPO: "339712865909.dkr.ecr.ap-south-1.amazonaws.com/customer_service"
    ORDER_SERVICE_REPO: "339712865909.dkr.ecr.ap-south-1.amazonaws.com/order_service"
    NOTIFICATION_SERVICE_REPO: "339712865909.dkr.ecr.ap-south-1.amazonaws.com/notification_service"

phases:
  install:
    runtime-versions:
      python: 3.9
      golang: 1.18
      nodejs: 18
    commands:
      - echo "Installing dependencies"
      - GITLEAKS_VERSION="8.18.1"
      - wget "https://github.com/zricethezav/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
      - tar -xzf "gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
      - mv gitleaks /usr/local/bin/
      - chmod +x /usr/local/bin/gitleaks
      - rm "gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
      - npm install -g snyk
      - echo "Installing Hadolint"
      - wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
      - chmod +x /usr/local/bin/hadolint
      - echo "Installing Trivy"
      - VERSION=$(wget -qO- https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | awk -F '"' '{print $4}')
      - wget -O trivy.tar.gz "https://github.com/aquasecurity/trivy/releases/download/$VERSION/trivy_${VERSION#v}_Linux-64bit.tar.gz"
      - tar -xzf trivy.tar.gz
      - mv trivy /usr/local/bin/
      - rm trivy.tar.gz
      - trivy --version

  pre_build:
    commands:
      - echo "Running pre-build phase"
      - |
        function send_slack {
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$1\"}" $SLACK_WEBHOOK_URL
        }
      - echo "Logging into AWS ECR"
      - aws --version
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME"

      - echo "Running Gitleaks for secret scanning..."
      - gitleaks detect --source . --verbose --redact  || echo "Secrets found"
      - if [ $? -eq 0 ]; then echo "No secrets found"; send_slack "✅ Gitleaks completed successfully"; else echo "Secrets found"; send_slack "❌ Gitleaks found secrets"; fi

      - echo "Authenticating Snyk..."
      - snyk auth $SNYK_TOKEN
      - echo "**** SNYK DEPENDENCY SCANNING ****"
      - cd backend

      - echo "Running Snyk for Python service"
      - cd customer-registration
      - snyk test 
      - if [ $? -eq 0 ]; then echo "Python service Snyk scan passed"; send_slack "✅ Python service Snyk scan passed"; else echo "Python service Snyk scan failed"; send_slack "❌ Python service Snyk scan failed"; fi
      - cd ..

      - echo "Running Snyk for Node.js service"
      - cd order-processing
      - snyk test 
       - if [ $? -eq 0 ]; then echo "Node.js service Snyk scan passed"; send_slack "✅ Node.js service Snyk scan passed"; else echo "Node.js service Snyk scan failed"; send_slack "❌ Node.js service Snyk scan failed"; fi
      - cd ..

      - echo "Running Snyk for Golang service"
      - cd notification
      - snyk test 
      - if [ $? -eq 0 ]; then echo "Golang service Snyk scan passed"; send_slack "✅ Golang service Snyk scan passed"; else echo "Golang service Snyk scan failed"; send_slack "❌ Golang service Snyk scan failed"; fi
      - cd ..

      - echo "******************* Running Hadolint ***********************"
      - echo "Scanning Python service Dockerfile"
      - hadolint customer-registration/Dockerfile 
      - if [ $? -eq 0 ]; then echo "No issues found in Python Dockerfile"; send_slack "✅ No issues in Python Dockerfile"; else echo "Hadolint warnings for Python service"; send_slack "❌ Hadolint warnings for Python service"; fi

      - echo "Scanning Node.js service Dockerfile"
      - hadolint order-processing/Dockerfile 
      - if [ $? -eq 0 ]; then echo "No issues found in Node.js Dockerfile"; send_slack "✅ No issues in Node.js Dockerfile"; else echo "Hadolint warnings for Node.js service"; send_slack "❌ Hadolint warnings for Node.js service"; fi

      - echo "Scanning Golang service Dockerfile"
      - hadolint notification/Dockerfile 
      - if [ $? -eq 0 ]; then echo "No issues found in Golang Dockerfile"; send_slack "✅ No issues in Golang Dockerfile"; else echo "Hadolint warnings for Golang service"; send_slack "❌ Hadolint warnings for Golang service"; fi


  build:
    commands:
      - echo "************* Building Docker Images ***************"

      - echo "Building Customer Registration Docker Image"
      - cd customer-registration
      - docker build -t $CUSTOMER_SERVICE_REPO:$IMAGE_TAG .
      - send_slack "✅ Image Build Completed for $CUSTOMER_SERVICE_REPO"
      - cd ..

      - echo "Building Order Processing Docker Image"
      - cd order-processing
      - docker build -t $ORDER_SERVICE_REPO:$IMAGE_TAG .
      - send_slack "✅ Image Build Completed for $ORDER_SERVICE_REPO"
      - cd ..

      - echo "Building Notification Docker Image"
      - cd notification
      - docker build -t $NOTIFICATION_SERVICE_REPO:$IMAGE_TAG .
      - send_slack "✅ Image Build Completed for $NOTIFICATION_SERVICE_REPO"
      - cd ..

  post_build:
    commands:
      - echo "************ Post Build Phase ************"

      - echo "Scanning Docker Images with Trivy"
      - echo "Scanning Customer Image"
      - trivy image --exit-code 0 --severity HIGH,CRITICAL $CUSTOMER_SERVICE_REPO:$IMAGE_TAG 
      - if [ $? -eq 0 ]; then echo "Customer Image Trivy scan passed"; send_slack "✅ Customer Image Trivy scan passed"; else echo "Customer Image Trivy scan completed with issues"; send_slack "❌ Customer Image Trivy scan completed with issues"; fi
      
      - echo "Scanning Order Image"
      - trivy image --exit-code 0 --severity HIGH,CRITICAL $ORDER_SERVICE_REPO:$IMAGE_TAG 
      - if [ $? -eq 0 ]; then echo "Order Image Trivy scan passed"; send_slack "✅ Order Image Trivy scan passed"; else echo "Order Image Trivy scan completed with issues"; send_slack "❌ Order Image Trivy scan completed with issues"; fi
    
      - echo "Scanning Notification Image"
      - trivy image --exit-code 0 --severity HIGH,CRITICAL $NOTIFICATION_SERVICE_REPO:$IMAGE_TAG 
      - if [ $? -eq 0 ]; then echo "Notification Image Trivy scan passed"; send_slack "✅ Notification Image Trivy scan passed"; else echo "Notification Image Trivy scan completed with issues"; send_slack "❌ Notification Image Trivy scan completed with issues"; fi

      - echo "Trivy Scan Completed"
      - send_slack "✅ Trivy Scans Completed"

      - echo "************* Tagging and Pushing Images to AWS ECR *************"

      - docker push $CUSTOMER_SERVICE_REPO:$IMAGE_TAG
      - if [ $? -eq 0 ]; then echo "Customer Image pushed successfully"; send_slack "✅ Customer Image pushed successfully"; else echo "Customer Image push failed"; send_slack "❌ Customer Image push failed"; fi
      - docker push $ORDER_SERVICE_REPO:$IMAGE_TAG
      - if [ $? -eq 0 ]; then echo "Order Image pushed successfully"; send_slack "✅ Order Image pushed successfully"; else echo "Order Image push failed"; send_slack "❌ Order Image push failed"; fi
      - docker push $NOTIFICATION_SERVICE_REPO:$IMAGE_TAG
      - if [ $? -eq 0 ]; then echo "Notification Image pushed successfully"; send_slack "✅ Notification Image pushed successfully"; else echo "Notification Image push failed"; send_slack "❌ Notification Image push failed"; fi
      
      - echo "All Images Successfully Pushed to AWS ECR!"
      - send_slack "✅ All Images Successfully Pushed to AWS ECR!"

      

